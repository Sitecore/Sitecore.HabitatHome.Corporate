# Build Habitat Home Corporate Docker images
trigger:
  branches:
    include:
    - develop
schedules:
  - cron: "0 17 * * 0"
    displayName: Weekly Sunday build
    branches:
      include:
      - master
      - develop
    always: true
resources:
- repo: self
  clean: true

variables:
  GitVersion.SemVer: ''
  GitVersion.PreReleaseLabel: ''
  tag: '$(GitVersion.PreReleaseLabel)-$(GitVersion.MajorMinorPatch)'
  additionalImageTags: ''

stages:
- stage: Build
  displayName: 'Build Solution'
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: docker
      demands:
        - Agent.OS -equals Windows_NT
    steps:
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec:
    - task: GitVersion@5
      inputs:
        runtime: 'full'
        configFilePath: 'GitVersion.yml'
        updateAssemblyInfo: true
    - task: PowerShell@2
      displayName: 'Set correct image tag'
      inputs:
        targetType: 'inline'
        script: 'echo "##vso[task.setvariable variable=tag]$(GitVersion.MajorMinorPatch)"'
      condition: eq(variables['GitVersion.PreReleaseLabel'], '')
    - task: PowerShell@2
      displayName: 'Tag the PR without the version number'
      inputs:
        targetType: 'inline'
        script: 'echo "##vso[task.setvariable variable=tag]$(GitVersion.PreReleaseLabel)"'
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    - task: PowerShell@2
      displayName: 'Set :latest tag'
      inputs:
        targetType: 'inline'
        script: 'echo "##vso[task.setvariable variable=additionalImageTags]latest"'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    - task: PowerShell@2
      displayName: 'Set :stable tag'
      inputs:
        targetType: 'inline'
        script: 'echo "##vso[task.setvariable variable=additionalImageTags]stable"'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: PowerShell@2
      displayName: "Modifying cake-config"
      inputs:
        targetType: 'inline'
        script: |
          # Modify ProjectFolder
          $escapedPath = "$(Build.SourcesDirectory)" | ConvertTo-Json
          (Get-Content cake-config.json) -replace '(\"ProjectFolder\":) \"(.*)\"', "`$1$escapedPath" |Set-Content .\cake-config.json
          # Modify PublishTempFolder
          $escapedPath = (Join-Path "$(Build.SourcesDirectory)" "Temp") | ConvertTo-Json
          (Get-Content cake-config.json) -replace '(\"PublishTempFolder\":) \"(.*)\"', "`$1$escapedPath" |Set-Content .\cake-config.json
          # Modify Sitecore Azure Toolkit Folder
          $escapedPath = "f:\assets\sat" |ConvertTo-Json # TODO - bad assumption that SAT exists
          (Get-Content cake-config.json) -replace '(\"SitecoreAzureToolkitPath\":) \"(.*)\"', "`$1$escapedPath" |Set-Content .\cake-config.json
        workingDirectory: '$(Build.SourcesDirectory)'
    - task: PowerShell@2
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        INTERNAL_NUGET_SOURCE: $(nuget.source)
      displayName: "Build Solution"
      inputs:
        filePath: 'build.ps1'
        arguments: '-DeploymentTarget=DockerBuild'
        workingDirectory: '$(Build.SourcesDirectory)'
    - task: PublishPipelineArtifact@1
      displayName: "Publish Docker Build Assets"
      inputs:
        targetPath: '$(Build.SourcesDirectory)\docker\images'
        artifact: 'docker-package'
        publishLocation: 'pipeline'
- stage: Docker
  dependsOn: Build
  displayName: 'Build Docker Images'
  jobs:
  - job: BuildPlatform
    displayName: 'Build images with Platform Base'
    pool:
      name: docker
      demands:
        - Agent.OS -equals Windows_NT
    steps:
    - checkout: self
      clean: true
    - task: GitVersion@5
      inputs:
        runtime: 'full'
        configFilePath: 'GitVersion.yml'
        updateAssemblyInfo: true
    - task: PowerShell@2
      displayName: 'Set correct image tag'
      inputs:
        targetType: 'inline'
        script: 'echo "##vso[task.setvariable variable=tag]$(GitVersion.MajorMinorPatch)"'
      condition: eq(variables['GitVersion.PreReleaseLabel'], '')
    - task: PowerShell@2
      displayName: 'Tag the PR without the version number'
      inputs:
        targetType: 'inline'
        script: 'echo "##vso[task.setvariable variable=tag]$(GitVersion.PreReleaseLabel)"'
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    - task: PowerShell@2
      displayName: 'Set :latest tag'
      inputs:
        targetType: 'inline'
        script: 'echo "##vso[task.setvariable variable=additionalImageTags]latest"'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    - task: PowerShell@2
      displayName: 'Set :stable tag'
      inputs:
        targetType: 'inline'
        script: 'echo "##vso[task.setvariable variable=additionalImageTags]stable"'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Docker Build Assets'
      inputs:
        buildType: 'current'
        artifactName: 'docker-package'
        targetPath: '$(Build.SourcesDirectory)\docker\images'
    - task: DockerCompose@0
      displayName: "Docker Compose Build"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azure.subscription)
        azureContainerRegistry: $(container.registry)
        dockerComposeFile: 'docker-compose.yml'
        dockerComposeFileArgs: |
          DEMO_VERSION=$(tag)
          REGISTRY=$(REGISTRY)
          WINDOWSSERVERCORE_VERSION=$(WINDOWSSERVERCORE_VERSION)
          NANOSERVER_VERSION=$(NANOSERVER_VERSION)
          SITECORE_VERSION=$(SITECORE_VERSION)
          SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
          SITECORE_LICENSE=$(SITECORE_LICENSE)
          TELERIK_ENCRYPTION_KEY=$(TELERIK_ENCRYPTION_KEY)
        action: 'Build services'
        additionalImageTags: '$(additionalImageTags)'
        arguments: '-m 16G --parallel'
        currentWorkingDirectory: '$(Build.SourcesDirectory)'
    - task: DockerCompose@0
      displayName: "Push Images"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azure.subscription)
        azureContainerRegistry: $(container.registry)
        dockerComposeFile: 'docker-compose.yml'
        dockerComposeFileArgs: |
          REGISTRY=$(REGISTRY)
          DEMO_VERSION=$(tag)
          WINDOWSSERVERCORE_VERSION=$(WINDOWSSERVERCORE_VERSION)
          NANOSERVER_VERSION=$(NANOSERVER_VERSION)
          SITECORE_VERSION=$(SITECORE_VERSION)
          SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
          SITECORE_LICENSE=$(SITECORE_LICENSE)
          TELERIK_ENCRYPTION_KEY=$(TELERIK_ENCRYPTION_KEY)
        action: 'Push services'
        currentWorkingDirectory: '$(Build.SourcesDirectory)'
